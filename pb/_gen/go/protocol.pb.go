// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PersonReply_Sex int32

const (
	PersonReply_FEMALE PersonReply_Sex = 0
	PersonReply_MALE   PersonReply_Sex = 1
)

var PersonReply_Sex_name = map[int32]string{
	0: "FEMALE",
	1: "MALE",
}

var PersonReply_Sex_value = map[string]int32{
	"FEMALE": 0,
	"MALE":   1,
}

func (x PersonReply_Sex) String() string {
	return proto.EnumName(PersonReply_Sex_name, int32(x))
}

func (PersonReply_Sex) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0, 0}
}

// 相应结果
type PersonReply struct {
	//姓名
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//身份证
	IdCard string          `protobuf:"bytes,2,opt,name=id_card,json=idCard,proto3" json:"id_card,omitempty"`
	Age    int32           `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Sex    PersonReply_Sex `protobuf:"varint,4,opt,name=sex,proto3,enum=PersonReply_Sex" json:"sex,omitempty"`
	//是否已婚
	Married              bool       `protobuf:"varint,5,opt,name=married,proto3" json:"married,omitempty"`
	Amount               float64    `protobuf:"fixed64,6,opt,name=amount,proto3" json:"amount,omitempty"`
	Address              []string   `protobuf:"bytes,7,rep,name=address,proto3" json:"address,omitempty"`
	Others               []*any.Any `protobuf:"bytes,9,rep,name=Others,proto3" json:"Others,omitempty"`
	Data                 []byte     `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PersonReply) Reset()         { *m = PersonReply{} }
func (m *PersonReply) String() string { return proto.CompactTextString(m) }
func (*PersonReply) ProtoMessage()    {}
func (*PersonReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bc2336598a3f7e0, []int{0}
}

func (m *PersonReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PersonReply.Unmarshal(m, b)
}
func (m *PersonReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PersonReply.Marshal(b, m, deterministic)
}
func (m *PersonReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersonReply.Merge(m, src)
}
func (m *PersonReply) XXX_Size() int {
	return xxx_messageInfo_PersonReply.Size(m)
}
func (m *PersonReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PersonReply.DiscardUnknown(m)
}

var xxx_messageInfo_PersonReply proto.InternalMessageInfo

func (m *PersonReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PersonReply) GetIdCard() string {
	if m != nil {
		return m.IdCard
	}
	return ""
}

func (m *PersonReply) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *PersonReply) GetSex() PersonReply_Sex {
	if m != nil {
		return m.Sex
	}
	return PersonReply_FEMALE
}

func (m *PersonReply) GetMarried() bool {
	if m != nil {
		return m.Married
	}
	return false
}

func (m *PersonReply) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PersonReply) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PersonReply) GetOthers() []*any.Any {
	if m != nil {
		return m.Others
	}
	return nil
}

func (m *PersonReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("PersonReply_Sex", PersonReply_Sex_name, PersonReply_Sex_value)
	proto.RegisterType((*PersonReply)(nil), "PersonReply")
}

func init() { proto.RegisterFile("protocol.proto", fileDescriptor_2bc2336598a3f7e0) }

var fileDescriptor_2bc2336598a3f7e0 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x4f, 0x4f, 0xfa, 0x30,
	0x18, 0xc7, 0x7f, 0x65, 0x63, 0xc0, 0xc3, 0x2f, 0xb8, 0x34, 0x46, 0x1b, 0xbd, 0x54, 0x4e, 0x3d,
	0x98, 0x92, 0xa0, 0x37, 0x4f, 0x60, 0xf0, 0xa4, 0xd1, 0x14, 0x4f, 0x5e, 0x4c, 0x59, 0x1f, 0x71,
	0x71, 0x5b, 0x49, 0x37, 0x32, 0x78, 0x2d, 0xbe, 0x03, 0x5f, 0xa5, 0x59, 0x61, 0x89, 0xb7, 0xcf,
	0xf7, 0x4f, 0xfb, 0xe4, 0x0b, 0xa3, 0x8d, 0xb3, 0x95, 0x4d, 0x6c, 0x26, 0x3d, 0x5c, 0x5c, 0xa5,
	0x45, 0x92, 0x6d, 0x0d, 0x4e, 0xd6, 0xd6, 0xae, 0x33, 0x9c, 0x78, 0x77, 0xb5, 0xfd, 0x98, 0xe8,
	0x62, 0x7f, 0xa8, 0x8c, 0xbf, 0x3b, 0x30, 0x7c, 0x41, 0x57, 0xda, 0x42, 0xe1, 0x26, 0xdb, 0x53,
	0x0a, 0x61, 0xa1, 0x73, 0x64, 0x84, 0x13, 0x31, 0x50, 0x9e, 0xe9, 0x39, 0xf4, 0x52, 0xf3, 0x9e,
	0x68, 0x67, 0x58, 0xc7, 0xdb, 0x51, 0x6a, 0xee, 0xb5, 0x33, 0x34, 0x86, 0x40, 0xaf, 0x91, 0x05,
	0x9c, 0x88, 0xae, 0x6a, 0x90, 0x8e, 0x21, 0x28, 0x71, 0xc7, 0x42, 0x4e, 0xc4, 0x68, 0x1a, 0xcb,
	0x3f, 0x3f, 0xcb, 0x25, 0xee, 0x54, 0x13, 0x52, 0x06, 0xbd, 0x5c, 0x3b, 0x97, 0xa2, 0x61, 0x5d,
	0x4e, 0x44, 0x5f, 0xb5, 0x92, 0x9e, 0x41, 0xa4, 0x73, 0xbb, 0x2d, 0x2a, 0x16, 0x71, 0x22, 0x88,
	0x3a, 0xaa, 0xe6, 0x85, 0x36, 0xc6, 0x61, 0x59, 0xb2, 0x1e, 0x0f, 0xc4, 0x40, 0xb5, 0x92, 0x5e,
	0x43, 0xf4, 0x5c, 0x7d, 0xa2, 0x2b, 0xd9, 0x80, 0x07, 0x62, 0x38, 0x3d, 0x95, 0x87, 0xa9, 0xb2,
	0x9d, 0x2a, 0x67, 0xc5, 0x5e, 0x1d, 0x3b, 0xcd, 0x38, 0xa3, 0x2b, 0xcd, 0x80, 0x13, 0xf1, 0x5f,
	0x79, 0x1e, 0x5f, 0x42, 0xb0, 0xc4, 0x1d, 0x05, 0x88, 0x1e, 0x16, 0x4f, 0xb3, 0xc7, 0x45, 0xfc,
	0x8f, 0xf6, 0x21, 0xf4, 0x44, 0xe6, 0xb7, 0x70, 0x92, 0xd8, 0x5c, 0x3a, 0xac, 0xad, 0xcb, 0x8c,
	0xac, 0xeb, 0x7a, 0xde, 0x7f, 0x45, 0x9d, 0xd7, 0xd6, 0x7d, 0xbd, 0x85, 0xf2, 0x6e, 0xb3, 0xfa,
	0xe9, 0xc4, 0xea, 0x98, 0xb6, 0xc1, 0x2a, 0xf2, 0xc7, 0x6f, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xc0, 0x87, 0xe2, 0x67, 0x8f, 0x01, 0x00, 0x00,
}
