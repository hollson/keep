<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: response.proto

/**
 * 服务端响应操作类型
 *
 * Protobuf type <code>PongAction</code>
 */
class PongAction
{
    /**
     * 成员上线通知(带有染色等状态数据)
     *
     * Generated from protobuf enum <code>OnlineNotice = 0;</code>
     */
    const OnlineNotice = 0;
    /**
     * 成员(主动)下线通知
     *
     * Generated from protobuf enum <code>OfflineNotice = 1;</code>
     */
    const OfflineNotice = 1;
    /**
     * 地图分发数据(透传) packet
     *
     * Generated from protobuf enum <code>DataDistribute = 2;</code>
     */
    const DataDistribute = 2;
    /**
     * 地图副本数据(透传)
     *
     * Generated from protobuf enum <code>DataReplica = 3;</code>
     */
    const DataReplica = 3;
    /**
     * 请求定时快照
     *
     * Generated from protobuf enum <code>Snapshot = 4;</code>
     */
    const Snapshot = 4;
    /**
     * 暂停编辑(通知)
     *
     * Generated from protobuf enum <code>Hangup = 5;</code>
     */
    const Hangup = 5;
    /**
     * 销毁项目(通知)
     *
     * Generated from protobuf enum <code>Dispose = 6;</code>
     */
    const Dispose = 6;

    private static $valueToName = [
        self::OnlineNotice => 'OnlineNotice',
        self::OfflineNotice => 'OfflineNotice',
        self::DataDistribute => 'DataDistribute',
        self::DataReplica => 'DataReplica',
        self::Snapshot => 'Snapshot',
        self::Hangup => 'Hangup',
        self::Dispose => 'Dispose',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

